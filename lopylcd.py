# Minimal I2C LCD library for LoPy board
# Ported from Adafruit_Python_SSD1306 library by Dmitrii (dmitryelj@gmail.com)
# Ported to a class and stripped to 128x64 and I2C only
# by Keptenkurk (github.com/keptenkurk)
# v0.9 10/3/18

from machine import I2C
from machine import Pin
import time


class lopylcd:

    # I2C OLED
    i2c = None

    # LCD Control constants
    SSD1306_I2C_ADDRESS = 0x3C
    SSD1306_SETCONTRAST = 0x81
    SSD1306_DISPLAYALLON_RESUME = 0xA4
    SSD1306_DISPLAYALLON = 0xA5
    SSD1306_NORMALDISPLAY = 0xA6
    SSD1306_INVERTDISPLAY = 0xA7
    SSD1306_DISPLAYOFF = 0xAE
    SSD1306_DISPLAYON = 0xAF
    SSD1306_SETDISPLAYOFFSET = 0xD3
    SSD1306_SETCOMPINS = 0xDA
    SSD1306_SETVCOMDETECT = 0xDB
    SSD1306_SETDISPLAYCLOCKDIV = 0xD5
    SSD1306_SETPRECHARGE = 0xD9
    SSD1306_SETMULTIPLEX = 0xA8
    SSD1306_SETLOWCOLUMN = 0x00
    SSD1306_SETHIGHCOLUMN = 0x10
    SSD1306_SETSTARTLINE = 0x40
    SSD1306_MEMORYMODE = 0x20
    SSD1306_COLUMNADDR = 0x21
    SSD1306_PAGEADDR = 0x22
    SSD1306_COMSCANINC = 0xC0
    SSD1306_COMSCANDEC = 0xC8
    SSD1306_SEGREMAP = 0xA0
    SSD1306_CHARGEPUMP = 0x8D
    SSD1306_EXTERNALVCC = 0x1
    SSD1306_SWITCHCAPVCC = 0x2

    # Scrolling constants
    SSD1306_ACTIVATE_SCROLL = 0x2F
    SSD1306_DEACTIVATE_SCROLL = 0x2E
    SSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3
    SSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26
    SSD1306_LEFT_HORIZONTAL_SCROLL = 0x27
    SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29
    SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A

    # Font data. Taken from https://github.com/hsmptg/lcd/blob/master/font.py
    font = [
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x5F, 0x00, 0x00,
        0x00, 0x07, 0x00, 0x07, 0x00,
        0x14, 0x7F, 0x14, 0x7F, 0x14,
        0x24, 0x2A, 0x7F, 0x2A, 0x12,
        0x23, 0x13, 0x08, 0x64, 0x62,
        0x36, 0x49, 0x56, 0x20, 0x50,
        0x00, 0x08, 0x07, 0x03, 0x00,
        0x00, 0x1C, 0x22, 0x41, 0x00,
        0x00, 0x41, 0x22, 0x1C, 0x00,
        0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
        0x08, 0x08, 0x3E, 0x08, 0x08,
        0x00, 0x80, 0x70, 0x30, 0x00,
        0x08, 0x08, 0x08, 0x08, 0x08,
        0x00, 0x00, 0x60, 0x60, 0x00,
        0x20, 0x10, 0x08, 0x04, 0x02,
        0x3E, 0x51, 0x49, 0x45, 0x3E,
        0x00, 0x42, 0x7F, 0x40, 0x00,
        0x72, 0x49, 0x49, 0x49, 0x46,
        0x21, 0x41, 0x49, 0x4D, 0x33,
        0x18, 0x14, 0x12, 0x7F, 0x10,
        0x27, 0x45, 0x45, 0x45, 0x39,
        0x3C, 0x4A, 0x49, 0x49, 0x31,
        0x41, 0x21, 0x11, 0x09, 0x07,
        0x36, 0x49, 0x49, 0x49, 0x36,
        0x46, 0x49, 0x49, 0x29, 0x1E,
        0x00, 0x00, 0x14, 0x00, 0x00,
        0x00, 0x40, 0x34, 0x00, 0x00,
        0x00, 0x08, 0x14, 0x22, 0x41,
        0x14, 0x14, 0x14, 0x14, 0x14,
        0x00, 0x41, 0x22, 0x14, 0x08,
        0x02, 0x01, 0x59, 0x09, 0x06,
        0x3E, 0x41, 0x5D, 0x59, 0x4E,
        0x7C, 0x12, 0x11, 0x12, 0x7C,
        0x7F, 0x49, 0x49, 0x49, 0x36,
        0x3E, 0x41, 0x41, 0x41, 0x22,
        0x7F, 0x41, 0x41, 0x41, 0x3E,
        0x7F, 0x49, 0x49, 0x49, 0x41,
        0x7F, 0x09, 0x09, 0x09, 0x01,
        0x3E, 0x41, 0x41, 0x51, 0x73,
        0x7F, 0x08, 0x08, 0x08, 0x7F,
        0x00, 0x41, 0x7F, 0x41, 0x00,
        0x20, 0x40, 0x41, 0x3F, 0x01,
        0x7F, 0x08, 0x14, 0x22, 0x41,
        0x7F, 0x40, 0x40, 0x40, 0x40,
        0x7F, 0x02, 0x1C, 0x02, 0x7F,
        0x7F, 0x04, 0x08, 0x10, 0x7F,
        0x3E, 0x41, 0x41, 0x41, 0x3E,
        0x7F, 0x09, 0x09, 0x09, 0x06,
        0x3E, 0x41, 0x51, 0x21, 0x5E,
        0x7F, 0x09, 0x19, 0x29, 0x46,
        0x26, 0x49, 0x49, 0x49, 0x32,
        0x03, 0x01, 0x7F, 0x01, 0x03,
        0x3F, 0x40, 0x40, 0x40, 0x3F,
        0x1F, 0x20, 0x40, 0x20, 0x1F,
        0x3F, 0x40, 0x38, 0x40, 0x3F,
        0x63, 0x14, 0x08, 0x14, 0x63,
        0x03, 0x04, 0x78, 0x04, 0x03,
        0x61, 0x59, 0x49, 0x4D, 0x43,
        0x00, 0x7F, 0x41, 0x41, 0x41,
        0x02, 0x04, 0x08, 0x10, 0x20,
        0x00, 0x41, 0x41, 0x41, 0x7F,
        0x04, 0x02, 0x01, 0x02, 0x04,
        0x40, 0x40, 0x40, 0x40, 0x40,
        0x00, 0x03, 0x07, 0x08, 0x00,
        0x20, 0x54, 0x54, 0x78, 0x40,
        0x7F, 0x28, 0x44, 0x44, 0x38,
        0x38, 0x44, 0x44, 0x44, 0x28,
        0x38, 0x44, 0x44, 0x28, 0x7F,
        0x38, 0x54, 0x54, 0x54, 0x18,
        0x00, 0x08, 0x7E, 0x09, 0x02,
        0x18, 0xA4, 0xA4, 0x9C, 0x78,
        0x7F, 0x08, 0x04, 0x04, 0x78,
        0x00, 0x44, 0x7D, 0x40, 0x00,
        0x20, 0x40, 0x40, 0x3D, 0x00,
        0x7F, 0x10, 0x28, 0x44, 0x00,
        0x00, 0x41, 0x7F, 0x40, 0x00,
        0x7C, 0x04, 0x78, 0x04, 0x78,
        0x7C, 0x08, 0x04, 0x04, 0x78,
        0x38, 0x44, 0x44, 0x44, 0x38,
        0xFC, 0x18, 0x24, 0x24, 0x18,
        0x18, 0x24, 0x24, 0x18, 0xFC,
        0x7C, 0x08, 0x04, 0x04, 0x08,
        0x48, 0x54, 0x54, 0x54, 0x24,
        0x04, 0x04, 0x3F, 0x44, 0x24,
        0x3C, 0x40, 0x40, 0x20, 0x7C,
        0x1C, 0x20, 0x40, 0x20, 0x1C,
        0x3C, 0x40, 0x30, 0x40, 0x3C,
        0x44, 0x28, 0x10, 0x28, 0x44,
        0x4C, 0x90, 0x90, 0x90, 0x7C,
        0x44, 0x64, 0x54, 0x4C, 0x44,
        0x00, 0x08, 0x36, 0x41, 0x00,
        0x00, 0x00, 0x77, 0x00, 0x00,
        0x00, 0x41, 0x36, 0x08, 0x00,
        0x02, 0x01, 0x02, 0x04, 0x02,
        0x3C, 0x26, 0x23, 0x26, 0x3C]

    def isConnected(self):
        return self.SSD1306_I2C_ADDRESS in self.i2c.scan()

    def command(self, *commandbytes):
        senddata = bytearray([0])
        for i in commandbytes:
            senddata.append(i)
        self.i2c.writeto(self.SSD1306_I2C_ADDRESS, senddata)

    def set_contrast(self, contrast):
        # Sets the contrast of the display
        # Contrast should be a value between 0 and 255
        if 0 <= contrast <= 255:
            self.command(self.SSD1306_SETCONTRAST,  contrast)

    def displayOff(self):
        self.command(self.SSD1306_DISPLAYOFF)

    def displayOn(self):
        self.command(self.SSD1306_DISPLAYON)

    def clearBuffer(self):
        for i in range(0, len(self.buffer)):
            self.buffer[i] = 0

    def addString(self, x, y, str):
        symPos = self.width * y + 6 * x
        for i in range(0, len(str)):
            c = 5 * (ord(str[i]) - 32)
            self.buffer[symPos] = self.font[c]
            for j in range(1, 5):
                self.buffer[symPos + j] = self.font[c + j]
            symPos += 6

    def drawBuffer(self):
        self.command(self.SSD1306_SETLOWCOLUMN)
        self.command(self.SSD1306_SETHIGHCOLUMN)
        self.command(self.SSD1306_SETSTARTLINE)
        # Write display buffer to physical display.
        line = [0] * 17
        line[0] = 0x40
        for i in range(0, len(self.buffer), 16):
            for p in range(0, 16):
                line[p + 1] = self.buffer[i + p]
            self.i2c.writeto(self.SSD1306_I2C_ADDRESS, bytearray(line))

    def __init__(self, sda_pin, scl_pin):
        # 128x64 I2C OLED Display
        self.width = 0x80
        self.height = 0x40
        self.pages = 8  # height/8
        self.buffer = [0]*1024  # 128*64/8
        self.sda = sda_pin
        self.scl = scl_pin
        self.i2c = I2C(0, I2C.MASTER, pins=(self.sda, self.scl), baudrate=100000)
        if self.isConnected():
            self.command(self.SSD1306_DISPLAYOFF)
            self.command(self.SSD1306_DISPLAYALLON_RESUME)
            self.command(self.SSD1306_SETDISPLAYCLOCKDIV, 0x80)
            self.command(self.SSD1306_SETMULTIPLEX,  0x3F)
            self.command(self.SSD1306_SETDISPLAYOFFSET,  0x0)
            self.command(self.SSD1306_SETSTARTLINE | 0x0)
            self.command(self.SSD1306_CHARGEPUMP,  0x14)
            self.command(self.SSD1306_MEMORYMODE,  0x00)
            self.command(self.SSD1306_COLUMNADDR,  0,  self.width-1)
            self.command(self.SSD1306_PAGEADDR,  0,  self.pages-1)
            self.command(self.SSD1306_SEGREMAP | 0x1)
            self.command(self.SSD1306_COMSCANDEC)
            self.command(self.SSD1306_SETCOMPINS,  0x12)
            self.command(self.SSD1306_SETCONTRAST,  0xCF)
            self.command(self.SSD1306_SETPRECHARGE,  0xF1)
            self.command(self.SSD1306_SETVCOMDETECT,  0x40)
            self.command(self.SSD1306_NORMALDISPLAY)
            self.command(self.SSD1306_DISPLAYON)
        else:
            print('Unable to find display at address ', self.SSD1306_I2C_ADDRESS)
